package net.gtexcalibur.projecteuler;

import net.gtexcalibur.util.FactorUtils;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

/**
 * Created by George Turner on 10/20/2017.
 * <br> Problem 12 - Highly divisible triangular number
 * <pre>
 *

 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

      1: 1
      3: 1,3
      6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?

 * </pre>
 */
public class Problem_012 {

    private static final Map<BigInteger, BigInteger> triangleCache = new HashMap<>();
    static {
        triangleCache.put(BigInteger.ONE, BigInteger.ONE);
    }

    private static BigInteger calculateTriangleNumber(BigInteger source) {
        return triangleCache.computeIfAbsent(source,
                safe -> safe.add(calculateTriangleNumber(safe.subtract(BigInteger.ONE))));
    }

    private static void sample() {
        Optional<BigInteger> match = Stream.iterate(BigInteger.ONE, BigInteger.ONE::add)
                .map(Problem_012::calculateTriangleNumber)
                .filter(tn -> FactorUtils.factors(tn).count() >= 5)
                .findFirst();

        System.out.println(match.orElse(BigInteger.ZERO));
    }

    public static void main(String[] args) {
//        sample();

        Optional<BigInteger> match = Stream.iterate(BigInteger.ONE, BigInteger.ONE::add)
                        .map(Problem_012::calculateTriangleNumber)
                        .filter(tn -> FactorUtils.factors(tn).count() >= 500)
                        .findFirst();

        System.out.println(match.orElse(BigInteger.ZERO));
    }
}
